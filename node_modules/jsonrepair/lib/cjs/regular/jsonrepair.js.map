{"version":3,"file":"jsonrepair.js","names":["_JSONRepairError","require","_stringUtils","controlCharacters","escapeCharacters","b","f","n","r","t","jsonrepair","text","i","output","processed","parseValue","throwUnexpectedEnd","processedComma","parseCharacter","codeComma","parseWhitespaceAndSkipComments","isStartOfValue","endsWithCommaOrNewline","insertBeforeLastWhitespace","parseNewlineDelimitedJSON","stripLastOccurrence","charCodeAt","codeClosingBrace","codeClosingBracket","length","throwUnexpectedCharacter","parseObject","parseArray","parseString","parseNumber","parseKeywords","parseUnquotedString","start","changed","parseWhitespace","parseComment","whitespace","normal","isWhitespace","isSpecialWhitespace","codeSlash","codeAsterisk","atEndOfBlockComment","codeNewline","code","skipCharacter","skipEscapeCharacter","codeBackslash","skipEllipsis","codeDot","codeOpeningBrace","initial","processedKey","codeOpeningBracket","undefined","throwObjectKeyExpected","processedColon","codeColon","truncatedText","throwColonExpected","processedValue","concat","stopAtDelimiter","arguments","skipEscapeChars","isQuote","isEndQuote","isDoubleQuote","isSingleQuote","isSingleQuoteLike","isDoubleQuoteLike","iBefore","oBefore","str","iPrev","prevNonWhitespaceIndex","isDelimiter","charAt","substring","iQuote","oQuote","isDigit","parseConcatenatedString","char","escapeChar","slice","j","isHex","throwInvalidUnicodeCharacter","codeDoubleQuote","isControlCharacter","isValidStringCharacter","throwInvalidCharacter","codePlus","parsedStr","removeAtIndex","codeMinus","atEndOfNumber","repairNumberEndingWithNumericSymbol","codeLowercaseE","codeUppercaseE","num","hasInvalidLeadingZero","test","parseKeyword","name","value","isDelimiterExceptSlash","codeOpenParenthesis","isFunctionName","trim","codeCloseParenthesis","codeSemicolon","symbol","JSON","stringify","prev","JSONRepairError","chars"],"sources":["../../../src/regular/jsonrepair.ts"],"sourcesContent":["import { JSONRepairError } from '../utils/JSONRepairError.js'\nimport {\n  codeAsterisk,\n  codeBackslash,\n  codeCloseParenthesis,\n  codeClosingBrace,\n  codeClosingBracket,\n  codeColon,\n  codeComma,\n  codeDot,\n  codeDoubleQuote,\n  codeLowercaseE,\n  codeMinus,\n  codeNewline,\n  codeOpeningBrace,\n  codeOpeningBracket,\n  codeOpenParenthesis,\n  codePlus,\n  codeSemicolon,\n  codeSlash,\n  codeUppercaseE,\n  endsWithCommaOrNewline,\n  insertBeforeLastWhitespace,\n  isControlCharacter,\n  isDelimiter,\n  isDelimiterExceptSlash,\n  isDigit,\n  isDoubleQuote,\n  isDoubleQuoteLike,\n  isFunctionName,\n  isHex,\n  isQuote,\n  isSingleQuote,\n  isSingleQuoteLike,\n  isSpecialWhitespace,\n  isStartOfValue,\n  isValidStringCharacter,\n  isWhitespace,\n  removeAtIndex,\n  stripLastOccurrence\n} from '../utils/stringUtils.js'\n\nconst controlCharacters: { [key: string]: string } = {\n  '\\b': '\\\\b',\n  '\\f': '\\\\f',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t'\n}\n\n// map with all escape characters\nconst escapeCharacters: { [key: string]: string } = {\n  '\"': '\"',\n  '\\\\': '\\\\',\n  '/': '/',\n  b: '\\b',\n  f: '\\f',\n  n: '\\n',\n  r: '\\r',\n  t: '\\t'\n  // note that \\u is handled separately in parseString()\n}\n\n/**\n * Repair a string containing an invalid JSON document.\n * For example changes JavaScript notation into JSON notation.\n *\n * Example:\n *\n *     try {\n *       const json = \"{name: 'John'}\"\n *       const repaired = jsonrepair(json)\n *       console.log(repaired)\n *       // '{\"name\": \"John\"}'\n *     } catch (err) {\n *       console.error(err)\n *     }\n *\n */\nexport function jsonrepair(text: string): string {\n  let i = 0 // current index in text\n  let output = '' // generated output\n\n  const processed = parseValue()\n  if (!processed) {\n    throwUnexpectedEnd()\n  }\n\n  const processedComma = parseCharacter(codeComma)\n  if (processedComma) {\n    parseWhitespaceAndSkipComments()\n  }\n\n  if (isStartOfValue(text[i]) && endsWithCommaOrNewline(output)) {\n    // start of a new value after end of the root level object: looks like\n    // newline delimited JSON -> turn into a root level array\n    if (!processedComma) {\n      // repair missing comma\n      output = insertBeforeLastWhitespace(output, ',')\n    }\n\n    parseNewlineDelimitedJSON()\n  } else if (processedComma) {\n    // repair: remove trailing comma\n    output = stripLastOccurrence(output, ',')\n  }\n\n  // repair redundant end quotes\n  while (text.charCodeAt(i) === codeClosingBrace || text.charCodeAt(i) === codeClosingBracket) {\n    i++\n    parseWhitespaceAndSkipComments()\n  }\n\n  if (i >= text.length) {\n    // reached the end of the document properly\n    return output\n  }\n\n  throwUnexpectedCharacter()\n\n  function parseValue(): boolean {\n    parseWhitespaceAndSkipComments()\n    const processed =\n      parseObject() ||\n      parseArray() ||\n      parseString() ||\n      parseNumber() ||\n      parseKeywords() ||\n      parseUnquotedString()\n    parseWhitespaceAndSkipComments()\n\n    return processed\n  }\n\n  function parseWhitespaceAndSkipComments(): boolean {\n    const start = i\n\n    let changed = parseWhitespace()\n    do {\n      changed = parseComment()\n      if (changed) {\n        changed = parseWhitespace()\n      }\n    } while (changed)\n\n    return i > start\n  }\n\n  function parseWhitespace(): boolean {\n    let whitespace = ''\n    let normal: boolean\n    while ((normal = isWhitespace(text.charCodeAt(i))) || isSpecialWhitespace(text.charCodeAt(i))) {\n      if (normal) {\n        whitespace += text[i]\n      } else {\n        // repair special whitespace\n        whitespace += ' '\n      }\n\n      i++\n    }\n\n    if (whitespace.length > 0) {\n      output += whitespace\n      return true\n    }\n\n    return false\n  }\n\n  function parseComment(): boolean {\n    // find a block comment '/* ... */'\n    if (text.charCodeAt(i) === codeSlash && text.charCodeAt(i + 1) === codeAsterisk) {\n      // repair block comment by skipping it\n      while (i < text.length && !atEndOfBlockComment(text, i)) {\n        i++\n      }\n      i += 2\n\n      return true\n    }\n\n    // find a line comment '// ...'\n    if (text.charCodeAt(i) === codeSlash && text.charCodeAt(i + 1) === codeSlash) {\n      // repair line comment by skipping it\n      while (i < text.length && text.charCodeAt(i) !== codeNewline) {\n        i++\n      }\n\n      return true\n    }\n\n    return false\n  }\n\n  function parseCharacter(code: number): boolean {\n    if (text.charCodeAt(i) === code) {\n      output += text[i]\n      i++\n      return true\n    }\n\n    return false\n  }\n\n  function skipCharacter(code: number): boolean {\n    if (text.charCodeAt(i) === code) {\n      i++\n      return true\n    }\n\n    return false\n  }\n\n  function skipEscapeCharacter(): boolean {\n    return skipCharacter(codeBackslash)\n  }\n\n  /**\n   * Skip ellipsis like \"[1,2,3,...]\" or \"[1,2,3,...,9]\" or \"[...,7,8,9]\"\n   * or a similar construct in objects.\n   */\n  function skipEllipsis(): boolean {\n    parseWhitespaceAndSkipComments()\n\n    if (\n      text.charCodeAt(i) === codeDot &&\n      text.charCodeAt(i + 1) === codeDot &&\n      text.charCodeAt(i + 2) === codeDot\n    ) {\n      // repair: remove the ellipsis (three dots) and optionally a comma\n      i += 3\n      parseWhitespaceAndSkipComments()\n      skipCharacter(codeComma)\n\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Parse an object like '{\"key\": \"value\"}'\n   */\n  function parseObject(): boolean {\n    if (text.charCodeAt(i) === codeOpeningBrace) {\n      output += '{'\n      i++\n      parseWhitespaceAndSkipComments()\n\n      // repair: skip leading comma like in {, message: \"hi\"}\n      if (skipCharacter(codeComma)) {\n        parseWhitespaceAndSkipComments()\n      }\n\n      let initial = true\n      while (i < text.length && text.charCodeAt(i) !== codeClosingBrace) {\n        let processedComma\n        if (!initial) {\n          processedComma = parseCharacter(codeComma)\n          if (!processedComma) {\n            // repair missing comma\n            output = insertBeforeLastWhitespace(output, ',')\n          }\n          parseWhitespaceAndSkipComments()\n        } else {\n          processedComma = true\n          initial = false\n        }\n\n        skipEllipsis()\n\n        const processedKey = parseString() || parseUnquotedString()\n        if (!processedKey) {\n          if (\n            text.charCodeAt(i) === codeClosingBrace ||\n            text.charCodeAt(i) === codeOpeningBrace ||\n            text.charCodeAt(i) === codeClosingBracket ||\n            text.charCodeAt(i) === codeOpeningBracket ||\n            text[i] === undefined\n          ) {\n            // repair trailing comma\n            output = stripLastOccurrence(output, ',')\n          } else {\n            throwObjectKeyExpected()\n          }\n          break\n        }\n\n        parseWhitespaceAndSkipComments()\n        const processedColon = parseCharacter(codeColon)\n        const truncatedText = i >= text.length\n        if (!processedColon) {\n          if (isStartOfValue(text[i]) || truncatedText) {\n            // repair missing colon\n            output = insertBeforeLastWhitespace(output, ':')\n          } else {\n            throwColonExpected()\n          }\n        }\n        const processedValue = parseValue()\n        if (!processedValue) {\n          if (processedColon || truncatedText) {\n            // repair missing object value\n            output += 'null'\n          } else {\n            throwColonExpected()\n          }\n        }\n      }\n\n      if (text.charCodeAt(i) === codeClosingBrace) {\n        output += '}'\n        i++\n      } else {\n        // repair missing end bracket\n        output = insertBeforeLastWhitespace(output, '}')\n      }\n\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Parse an array like '[\"item1\", \"item2\", ...]'\n   */\n  function parseArray(): boolean {\n    if (text.charCodeAt(i) === codeOpeningBracket) {\n      output += '['\n      i++\n      parseWhitespaceAndSkipComments()\n\n      // repair: skip leading comma like in [,1,2,3]\n      if (skipCharacter(codeComma)) {\n        parseWhitespaceAndSkipComments()\n      }\n\n      let initial = true\n      while (i < text.length && text.charCodeAt(i) !== codeClosingBracket) {\n        if (!initial) {\n          const processedComma = parseCharacter(codeComma)\n          if (!processedComma) {\n            // repair missing comma\n            output = insertBeforeLastWhitespace(output, ',')\n          }\n        } else {\n          initial = false\n        }\n\n        skipEllipsis()\n\n        const processedValue = parseValue()\n        if (!processedValue) {\n          // repair trailing comma\n          output = stripLastOccurrence(output, ',')\n          break\n        }\n      }\n\n      if (text.charCodeAt(i) === codeClosingBracket) {\n        output += ']'\n        i++\n      } else {\n        // repair missing closing array bracket\n        output = insertBeforeLastWhitespace(output, ']')\n      }\n\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Parse and repair Newline Delimited JSON (NDJSON):\n   * multiple JSON objects separated by a newline character\n   */\n  function parseNewlineDelimitedJSON() {\n    // repair NDJSON\n    let initial = true\n    let processedValue = true\n    while (processedValue) {\n      if (!initial) {\n        // parse optional comma, insert when missing\n        const processedComma = parseCharacter(codeComma)\n        if (!processedComma) {\n          // repair: add missing comma\n          output = insertBeforeLastWhitespace(output, ',')\n        }\n      } else {\n        initial = false\n      }\n\n      processedValue = parseValue()\n    }\n\n    if (!processedValue) {\n      // repair: remove trailing comma\n      output = stripLastOccurrence(output, ',')\n    }\n\n    // repair: wrap the output inside array brackets\n    output = `[\\n${output}\\n]`\n  }\n\n  /**\n   * Parse a string enclosed by double quotes \"...\". Can contain escaped quotes\n   * Repair strings enclosed in single quotes or special quotes\n   * Repair an escaped string\n   *\n   * The function can run in two stages:\n   * - First, it assumes the string has a valid end quote\n   * - If it turns out that the string does not have a valid end quote followed\n   *   by a delimiter (which should be the case), the function runs again in a\n   *   more conservative way, stopping the string at the first next delimiter\n   *   and fixing the string by inserting a quote there.\n   */\n  function parseString(stopAtDelimiter = false): boolean {\n    let skipEscapeChars = text.charCodeAt(i) === codeBackslash\n    if (skipEscapeChars) {\n      // repair: remove the first escape character\n      i++\n      skipEscapeChars = true\n    }\n\n    if (isQuote(text.charCodeAt(i))) {\n      // double quotes are correct JSON,\n      // single quotes come from JavaScript for example, we assume it will have a correct single end quote too\n      // otherwise, we will match any double-quote-like start with a double-quote-like end,\n      // or any single-quote-like start with a single-quote-like end\n      const isEndQuote = isDoubleQuote(text.charCodeAt(i))\n        ? isDoubleQuote\n        : isSingleQuote(text.charCodeAt(i))\n          ? isSingleQuote\n          : isSingleQuoteLike(text.charCodeAt(i))\n            ? isSingleQuoteLike\n            : isDoubleQuoteLike\n\n      const iBefore = i\n      const oBefore = output.length\n\n      let str = '\"'\n      i++\n\n      while (true) {\n        if (i >= text.length) {\n          // end of text, we are missing an end quote\n\n          const iPrev = prevNonWhitespaceIndex(i - 1)\n          if (!stopAtDelimiter && isDelimiter(text.charAt(iPrev))) {\n            // if the text ends with a delimiter, like [\"hello],\n            // so the missing end quote should be inserted before this delimiter\n            // retry parsing the string, stopping at the first next delimiter\n            i = iBefore\n            output = output.substring(0, oBefore)\n\n            return parseString(true)\n          }\n\n          // repair missing quote\n          str = insertBeforeLastWhitespace(str, '\"')\n          output += str\n\n          return true\n        } else if (isEndQuote(text.charCodeAt(i))) {\n          // end quote\n          // let us check what is before and after the quote to verify whether this is a legit end quote\n          const iQuote = i\n          const oQuote = str.length\n          str += '\"'\n          i++\n          output += str\n\n          parseWhitespaceAndSkipComments()\n\n          if (\n            stopAtDelimiter ||\n            i >= text.length ||\n            isDelimiter(text.charAt(i)) ||\n            isQuote(text.charCodeAt(i)) ||\n            isDigit(text.charCodeAt(i))\n          ) {\n            // The quote is followed by the end of the text, a delimiter, or a next value\n            // so the quote is indeed the end of the string\n            parseConcatenatedString()\n\n            return true\n          }\n\n          if (isDelimiter(text.charAt(prevNonWhitespaceIndex(iQuote - 1)))) {\n            // This is not the right end quote: it is preceded by a delimiter,\n            // and NOT followed by a delimiter. So, there is an end quote missing\n            // parse the string again and then stop at the first next delimiter\n            i = iBefore\n            output = output.substring(0, oBefore)\n\n            return parseString(true)\n          }\n\n          // revert to right after the quote but before any whitespace, and continue parsing the string\n          output = output.substring(0, oBefore)\n          i = iQuote + 1\n\n          // repair unescaped quote\n          str = str.substring(0, oQuote) + '\\\\' + str.substring(oQuote)\n        } else if (stopAtDelimiter && isDelimiter(text[i])) {\n          // we're in the mode to stop the string at the first delimiter\n          // because there is an end quote missing\n\n          // repair missing quote\n          str = insertBeforeLastWhitespace(str, '\"')\n          output += str\n\n          parseConcatenatedString()\n\n          return true\n        } else if (text.charCodeAt(i) === codeBackslash) {\n          // handle escaped content like \\n or \\u2605\n          const char = text.charAt(i + 1)\n          const escapeChar = escapeCharacters[char]\n          if (escapeChar !== undefined) {\n            str += text.slice(i, i + 2)\n            i += 2\n          } else if (char === 'u') {\n            let j = 2\n            while (j < 6 && isHex(text.charCodeAt(i + j))) {\n              j++\n            }\n\n            if (j === 6) {\n              str += text.slice(i, i + 6)\n              i += 6\n            } else if (i + j >= text.length) {\n              // repair invalid or truncated unicode char at the end of the text\n              // by removing the unicode char and ending the string here\n              i = text.length\n            } else {\n              throwInvalidUnicodeCharacter()\n            }\n          } else {\n            // repair invalid escape character: remove it\n            str += char\n            i += 2\n          }\n        } else {\n          // handle regular characters\n          const char = text.charAt(i)\n          const code = text.charCodeAt(i)\n\n          if (code === codeDoubleQuote && text.charCodeAt(i - 1) !== codeBackslash) {\n            // repair unescaped double quote\n            str += '\\\\' + char\n            i++\n          } else if (isControlCharacter(code)) {\n            // unescaped control character\n            str += controlCharacters[char]\n            i++\n          } else {\n            if (!isValidStringCharacter(code)) {\n              throwInvalidCharacter(char)\n            }\n            str += char\n            i++\n          }\n        }\n\n        if (skipEscapeChars) {\n          // repair: skipped escape character (nothing to do)\n          skipEscapeCharacter()\n        }\n      }\n    }\n\n    return false\n  }\n\n  /**\n   * Repair concatenated strings like \"hello\" + \"world\", change this into \"helloworld\"\n   */\n  function parseConcatenatedString(): boolean {\n    let processed = false\n\n    parseWhitespaceAndSkipComments()\n    while (text.charCodeAt(i) === codePlus) {\n      processed = true\n      i++\n      parseWhitespaceAndSkipComments()\n\n      // repair: remove the end quote of the first string\n      output = stripLastOccurrence(output, '\"', true)\n      const start = output.length\n      const parsedStr = parseString()\n      if (parsedStr) {\n        // repair: remove the start quote of the second string\n        output = removeAtIndex(output, start, 1)\n      } else {\n        // repair: remove the + because it is not followed by a string\n        output = insertBeforeLastWhitespace(output, '\"')\n      }\n    }\n\n    return processed\n  }\n\n  /**\n   * Parse a number like 2.4 or 2.4e6\n   */\n  function parseNumber(): boolean {\n    const start = i\n    if (text.charCodeAt(i) === codeMinus) {\n      i++\n      if (atEndOfNumber()) {\n        repairNumberEndingWithNumericSymbol(start)\n        return true\n      }\n      if (!isDigit(text.charCodeAt(i))) {\n        i = start\n        return false\n      }\n    }\n\n    // Note that in JSON leading zeros like \"00789\" are not allowed.\n    // We will allow all leading zeros here though and at the end of parseNumber\n    // check against trailing zeros and repair that if needed.\n    // Leading zeros can have meaning, so we should not clear them.\n    while (isDigit(text.charCodeAt(i))) {\n      i++\n    }\n\n    if (text.charCodeAt(i) === codeDot) {\n      i++\n      if (atEndOfNumber()) {\n        repairNumberEndingWithNumericSymbol(start)\n        return true\n      }\n      if (!isDigit(text.charCodeAt(i))) {\n        i = start\n        return false\n      }\n      while (isDigit(text.charCodeAt(i))) {\n        i++\n      }\n    }\n\n    if (text.charCodeAt(i) === codeLowercaseE || text.charCodeAt(i) === codeUppercaseE) {\n      i++\n      if (text.charCodeAt(i) === codeMinus || text.charCodeAt(i) === codePlus) {\n        i++\n      }\n      if (atEndOfNumber()) {\n        repairNumberEndingWithNumericSymbol(start)\n        return true\n      }\n      if (!isDigit(text.charCodeAt(i))) {\n        i = start\n        return false\n      }\n      while (isDigit(text.charCodeAt(i))) {\n        i++\n      }\n    }\n\n    // if we're not at the end of the number by this point, allow this to be parsed as another type\n    if (!atEndOfNumber()) {\n      i = start\n      return false\n    }\n\n    if (i > start) {\n      // repair a number with leading zeros like \"00789\"\n      const num = text.slice(start, i)\n      const hasInvalidLeadingZero = /^0\\d/.test(num)\n\n      output += hasInvalidLeadingZero ? `\"${num}\"` : num\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Parse keywords true, false, null\n   * Repair Python keywords True, False, None\n   */\n  function parseKeywords(): boolean {\n    return (\n      parseKeyword('true', 'true') ||\n      parseKeyword('false', 'false') ||\n      parseKeyword('null', 'null') ||\n      // repair Python keywords True, False, None\n      parseKeyword('True', 'true') ||\n      parseKeyword('False', 'false') ||\n      parseKeyword('None', 'null')\n    )\n  }\n\n  function parseKeyword(name: string, value: string): boolean {\n    if (text.slice(i, i + name.length) === name) {\n      output += value\n      i += name.length\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Repair an unquoted string by adding quotes around it\n   * Repair a MongoDB function call like NumberLong(\"2\")\n   * Repair a JSONP function call like callback({...});\n   */\n  function parseUnquotedString() {\n    // note that the symbol can end with whitespaces: we stop at the next delimiter\n    // also, note that we allow strings to contain a slash / in order to support repairing regular expressions\n    const start = i\n    while (i < text.length && !isDelimiterExceptSlash(text[i]) && !isQuote(text.charCodeAt(i))) {\n      i++\n    }\n\n    if (i > start) {\n      if (text.charCodeAt(i) === codeOpenParenthesis && isFunctionName(text.slice(start, i).trim())) {\n        // repair a MongoDB function call like NumberLong(\"2\")\n        // repair a JSONP function call like callback({...});\n        i++\n\n        parseValue()\n\n        if (text.charCodeAt(i) === codeCloseParenthesis) {\n          // repair: skip close bracket of function call\n          i++\n          if (text.charCodeAt(i) === codeSemicolon) {\n            // repair: skip semicolon after JSONP call\n            i++\n          }\n        }\n\n        return true\n      } else {\n        // repair unquoted string\n        // also, repair undefined into null\n\n        // first, go back to prevent getting trailing whitespaces in the string\n        while (isWhitespace(text.charCodeAt(i - 1)) && i > 0) {\n          i--\n        }\n\n        const symbol = text.slice(start, i)\n        output += symbol === 'undefined' ? 'null' : JSON.stringify(symbol)\n\n        if (text.charCodeAt(i) === codeDoubleQuote) {\n          // we had a missing start quote, but now we encountered the end quote, so we can skip that one\n          i++\n        }\n\n        return true\n      }\n    }\n  }\n\n  function prevNonWhitespaceIndex(start: number): number {\n    let prev = start\n\n    while (prev > 0 && isWhitespace(text.charCodeAt(prev))) {\n      prev--\n    }\n\n    return prev\n  }\n\n  function atEndOfNumber() {\n    return i >= text.length || isDelimiter(text[i]) || isWhitespace(text.charCodeAt(i))\n  }\n\n  function repairNumberEndingWithNumericSymbol(start: number) {\n    // repair numbers cut off at the end\n    // this will only be called when we end after a '.', '-', or 'e' and does not\n    // change the number more than it needs to make it valid JSON\n    output += text.slice(start, i) + '0'\n  }\n\n  function throwInvalidCharacter(char: string) {\n    throw new JSONRepairError('Invalid character ' + JSON.stringify(char), i)\n  }\n\n  function throwUnexpectedCharacter() {\n    throw new JSONRepairError('Unexpected character ' + JSON.stringify(text[i]), i)\n  }\n\n  function throwUnexpectedEnd() {\n    throw new JSONRepairError('Unexpected end of json string', text.length)\n  }\n\n  function throwObjectKeyExpected() {\n    throw new JSONRepairError('Object key expected', i)\n  }\n\n  function throwColonExpected() {\n    throw new JSONRepairError('Colon expected', i)\n  }\n\n  function throwInvalidUnicodeCharacter() {\n    const chars = text.slice(i, i + 6)\n    throw new JSONRepairError(`Invalid unicode character \"${chars}\"`, i)\n  }\n}\n\nfunction atEndOfBlockComment(text: string, i: number) {\n  return text[i] === '*' && text[i + 1] === '/'\n}\n"],"mappings":"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","ignoreList":[]}