{"version":3,"file":"jsonrepair.js","sources":["../esm/utils/JSONRepairError.js","../esm/utils/stringUtils.js","../esm/regular/jsonrepair.js"],"sourcesContent":["export class JSONRepairError extends Error {\n  constructor(message, position) {\n    super(message + ' at position ' + position);\n    this.position = position;\n  }\n}\n//# sourceMappingURL=JSONRepairError.js.map","export const codeBackslash = 0x5c; // \"\\\"\nexport const codeSlash = 0x2f; // \"/\"\nexport const codeAsterisk = 0x2a; // \"*\"\nexport const codeOpeningBrace = 0x7b; // \"{\"\nexport const codeClosingBrace = 0x7d; // \"}\"\nexport const codeOpeningBracket = 0x5b; // \"[\"\nexport const codeClosingBracket = 0x5d; // \"]\"\nexport const codeOpenParenthesis = 0x28; // \"(\"\nexport const codeCloseParenthesis = 0x29; // \")\"\nexport const codeSpace = 0x20; // \" \"\nexport const codeNewline = 0xa; // \"\\n\"\nexport const codeTab = 0x9; // \"\\t\"\nexport const codeReturn = 0xd; // \"\\r\"\nexport const codeBackspace = 0x08; // \"\\b\"\nexport const codeFormFeed = 0x0c; // \"\\f\"\nexport const codeDoubleQuote = 0x0022; // \"\nexport const codePlus = 0x2b; // \"+\"\nexport const codeMinus = 0x2d; // \"-\"\nexport const codeQuote = 0x27; // \"'\"\nexport const codeZero = 0x30; // \"0\"\nexport const codeNine = 0x39; // \"9\"\nexport const codeComma = 0x2c; // \",\"\nexport const codeDot = 0x2e; // \".\" (dot, period)\nexport const codeColon = 0x3a; // \":\"\nexport const codeSemicolon = 0x3b; // \";\"\nexport const codeUppercaseA = 0x41; // \"A\"\nexport const codeLowercaseA = 0x61; // \"a\"\nexport const codeUppercaseE = 0x45; // \"E\"\nexport const codeLowercaseE = 0x65; // \"e\"\nexport const codeUppercaseF = 0x46; // \"F\"\nexport const codeLowercaseF = 0x66; // \"f\"\nconst codeNonBreakingSpace = 0xa0;\nconst codeEnQuad = 0x2000;\nconst codeHairSpace = 0x200a;\nconst codeNarrowNoBreakSpace = 0x202f;\nconst codeMediumMathematicalSpace = 0x205f;\nconst codeIdeographicSpace = 0x3000;\nconst codeDoubleQuoteLeft = 0x201c; // “\nconst codeDoubleQuoteRight = 0x201d; // ”\nconst codeQuoteLeft = 0x2018; // ‘\nconst codeQuoteRight = 0x2019; // ’\nconst codeGraveAccent = 0x0060; // `\nconst codeAcuteAccent = 0x00b4; // ´\n\nexport function isHex(code) {\n  return code >= codeZero && code <= codeNine || code >= codeUppercaseA && code <= codeUppercaseF || code >= codeLowercaseA && code <= codeLowercaseF;\n}\nexport function isDigit(code) {\n  return code >= codeZero && code <= codeNine;\n}\nexport function isValidStringCharacter(code) {\n  return code >= 0x20 && code <= 0x10ffff;\n}\nexport function isDelimiter(char) {\n  return regexDelimiter.test(char);\n}\nconst regexDelimiter = /^[,:[\\]/{}()\\n+]$/;\nexport function isDelimiterExceptSlash(char) {\n  return isDelimiter(char) && char !== '/';\n}\nexport function isStartOfValue(char) {\n  return regexStartOfValue.test(char) || char && isQuote(char.charCodeAt(0));\n}\n\n// alpha, number, minus, or opening bracket or brace\nconst regexStartOfValue = /^[[{\\w-]$/;\nexport function isControlCharacter(code) {\n  return code === codeNewline || code === codeReturn || code === codeTab || code === codeBackspace || code === codeFormFeed;\n}\n\n/**\n * Check if the given character is a whitespace character like space, tab, or\n * newline\n */\nexport function isWhitespace(code) {\n  return code === codeSpace || code === codeNewline || code === codeTab || code === codeReturn;\n}\n\n/**\n * Check if the given character is a special whitespace character, some\n * unicode variant\n */\nexport function isSpecialWhitespace(code) {\n  return code === codeNonBreakingSpace || code >= codeEnQuad && code <= codeHairSpace || code === codeNarrowNoBreakSpace || code === codeMediumMathematicalSpace || code === codeIdeographicSpace;\n}\n\n/**\n * Test whether the given character is a quote or double quote character.\n * Also tests for special variants of quotes.\n */\nexport function isQuote(code) {\n  // the first check double quotes, since that occurs most often\n  return isDoubleQuoteLike(code) || isSingleQuoteLike(code);\n}\n\n/**\n * Test whether the given character is a double quote character.\n * Also tests for special variants of double quotes.\n */\nexport function isDoubleQuoteLike(code) {\n  // the first check double quotes, since that occurs most often\n  return code === codeDoubleQuote || code === codeDoubleQuoteLeft || code === codeDoubleQuoteRight;\n}\n\n/**\n * Test whether the given character is a double quote character.\n * Does NOT test for special variants of double quotes.\n */\nexport function isDoubleQuote(code) {\n  return code === codeDoubleQuote;\n}\n\n/**\n * Test whether the given character is a single quote character.\n * Also tests for special variants of single quotes.\n */\nexport function isSingleQuoteLike(code) {\n  return code === codeQuote || code === codeQuoteLeft || code === codeQuoteRight || code === codeGraveAccent || code === codeAcuteAccent;\n}\n\n/**\n * Test whether the given character is a single quote character.\n * Does NOT test for special variants of single quotes.\n */\nexport function isSingleQuote(code) {\n  return code === codeQuote;\n}\n\n/**\n * Strip last occurrence of textToStrip from text\n */\nexport function stripLastOccurrence(text, textToStrip) {\n  let stripRemainingText = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const index = text.lastIndexOf(textToStrip);\n  return index !== -1 ? text.substring(0, index) + (stripRemainingText ? '' : text.substring(index + 1)) : text;\n}\nexport function insertBeforeLastWhitespace(text, textToInsert) {\n  let index = text.length;\n  if (!isWhitespace(text.charCodeAt(index - 1))) {\n    // no trailing whitespaces\n    return text + textToInsert;\n  }\n  while (isWhitespace(text.charCodeAt(index - 1))) {\n    index--;\n  }\n  return text.substring(0, index) + textToInsert + text.substring(index);\n}\nexport function removeAtIndex(text, start, count) {\n  return text.substring(0, start) + text.substring(start + count);\n}\n\n/**\n * Test whether a string ends with a newline or comma character and optional whitespace\n */\nexport function endsWithCommaOrNewline(text) {\n  return /[,\\n][ \\t\\r]*$/.test(text);\n}\nexport function isFunctionName(text) {\n  return /^\\w+$/.test(text);\n}\n//# sourceMappingURL=stringUtils.js.map","import { JSONRepairError } from '../utils/JSONRepairError.js';\nimport { codeAsterisk, codeBackslash, codeCloseParenthesis, codeClosingBrace, codeClosingBracket, codeColon, codeComma, codeDot, codeDoubleQuote, codeLowercaseE, codeMinus, codeNewline, codeOpeningBrace, codeOpeningBracket, codeOpenParenthesis, codePlus, codeSemicolon, codeSlash, codeUppercaseE, endsWithCommaOrNewline, insertBeforeLastWhitespace, isControlCharacter, isDelimiter, isDelimiterExceptSlash, isDigit, isDoubleQuote, isDoubleQuoteLike, isFunctionName, isHex, isQuote, isSingleQuote, isSingleQuoteLike, isSpecialWhitespace, isStartOfValue, isValidStringCharacter, isWhitespace, removeAtIndex, stripLastOccurrence } from '../utils/stringUtils.js';\nconst controlCharacters = {\n  '\\b': '\\\\b',\n  '\\f': '\\\\f',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t'\n};\n\n// map with all escape characters\nconst escapeCharacters = {\n  '\"': '\"',\n  '\\\\': '\\\\',\n  '/': '/',\n  b: '\\b',\n  f: '\\f',\n  n: '\\n',\n  r: '\\r',\n  t: '\\t'\n  // note that \\u is handled separately in parseString()\n};\n\n/**\n * Repair a string containing an invalid JSON document.\n * For example changes JavaScript notation into JSON notation.\n *\n * Example:\n *\n *     try {\n *       const json = \"{name: 'John'}\"\n *       const repaired = jsonrepair(json)\n *       console.log(repaired)\n *       // '{\"name\": \"John\"}'\n *     } catch (err) {\n *       console.error(err)\n *     }\n *\n */\nexport function jsonrepair(text) {\n  let i = 0; // current index in text\n  let output = ''; // generated output\n\n  const processed = parseValue();\n  if (!processed) {\n    throwUnexpectedEnd();\n  }\n  const processedComma = parseCharacter(codeComma);\n  if (processedComma) {\n    parseWhitespaceAndSkipComments();\n  }\n  if (isStartOfValue(text[i]) && endsWithCommaOrNewline(output)) {\n    // start of a new value after end of the root level object: looks like\n    // newline delimited JSON -> turn into a root level array\n    if (!processedComma) {\n      // repair missing comma\n      output = insertBeforeLastWhitespace(output, ',');\n    }\n    parseNewlineDelimitedJSON();\n  } else if (processedComma) {\n    // repair: remove trailing comma\n    output = stripLastOccurrence(output, ',');\n  }\n\n  // repair redundant end quotes\n  while (text.charCodeAt(i) === codeClosingBrace || text.charCodeAt(i) === codeClosingBracket) {\n    i++;\n    parseWhitespaceAndSkipComments();\n  }\n  if (i >= text.length) {\n    // reached the end of the document properly\n    return output;\n  }\n  throwUnexpectedCharacter();\n  function parseValue() {\n    parseWhitespaceAndSkipComments();\n    const processed = parseObject() || parseArray() || parseString() || parseNumber() || parseKeywords() || parseUnquotedString();\n    parseWhitespaceAndSkipComments();\n    return processed;\n  }\n  function parseWhitespaceAndSkipComments() {\n    const start = i;\n    let changed = parseWhitespace();\n    do {\n      changed = parseComment();\n      if (changed) {\n        changed = parseWhitespace();\n      }\n    } while (changed);\n    return i > start;\n  }\n  function parseWhitespace() {\n    let whitespace = '';\n    let normal;\n    while ((normal = isWhitespace(text.charCodeAt(i))) || isSpecialWhitespace(text.charCodeAt(i))) {\n      if (normal) {\n        whitespace += text[i];\n      } else {\n        // repair special whitespace\n        whitespace += ' ';\n      }\n      i++;\n    }\n    if (whitespace.length > 0) {\n      output += whitespace;\n      return true;\n    }\n    return false;\n  }\n  function parseComment() {\n    // find a block comment '/* ... */'\n    if (text.charCodeAt(i) === codeSlash && text.charCodeAt(i + 1) === codeAsterisk) {\n      // repair block comment by skipping it\n      while (i < text.length && !atEndOfBlockComment(text, i)) {\n        i++;\n      }\n      i += 2;\n      return true;\n    }\n\n    // find a line comment '// ...'\n    if (text.charCodeAt(i) === codeSlash && text.charCodeAt(i + 1) === codeSlash) {\n      // repair line comment by skipping it\n      while (i < text.length && text.charCodeAt(i) !== codeNewline) {\n        i++;\n      }\n      return true;\n    }\n    return false;\n  }\n  function parseCharacter(code) {\n    if (text.charCodeAt(i) === code) {\n      output += text[i];\n      i++;\n      return true;\n    }\n    return false;\n  }\n  function skipCharacter(code) {\n    if (text.charCodeAt(i) === code) {\n      i++;\n      return true;\n    }\n    return false;\n  }\n  function skipEscapeCharacter() {\n    return skipCharacter(codeBackslash);\n  }\n\n  /**\n   * Skip ellipsis like \"[1,2,3,...]\" or \"[1,2,3,...,9]\" or \"[...,7,8,9]\"\n   * or a similar construct in objects.\n   */\n  function skipEllipsis() {\n    parseWhitespaceAndSkipComments();\n    if (text.charCodeAt(i) === codeDot && text.charCodeAt(i + 1) === codeDot && text.charCodeAt(i + 2) === codeDot) {\n      // repair: remove the ellipsis (three dots) and optionally a comma\n      i += 3;\n      parseWhitespaceAndSkipComments();\n      skipCharacter(codeComma);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Parse an object like '{\"key\": \"value\"}'\n   */\n  function parseObject() {\n    if (text.charCodeAt(i) === codeOpeningBrace) {\n      output += '{';\n      i++;\n      parseWhitespaceAndSkipComments();\n\n      // repair: skip leading comma like in {, message: \"hi\"}\n      if (skipCharacter(codeComma)) {\n        parseWhitespaceAndSkipComments();\n      }\n      let initial = true;\n      while (i < text.length && text.charCodeAt(i) !== codeClosingBrace) {\n        let processedComma;\n        if (!initial) {\n          processedComma = parseCharacter(codeComma);\n          if (!processedComma) {\n            // repair missing comma\n            output = insertBeforeLastWhitespace(output, ',');\n          }\n          parseWhitespaceAndSkipComments();\n        } else {\n          processedComma = true;\n          initial = false;\n        }\n        skipEllipsis();\n        const processedKey = parseString() || parseUnquotedString();\n        if (!processedKey) {\n          if (text.charCodeAt(i) === codeClosingBrace || text.charCodeAt(i) === codeOpeningBrace || text.charCodeAt(i) === codeClosingBracket || text.charCodeAt(i) === codeOpeningBracket || text[i] === undefined) {\n            // repair trailing comma\n            output = stripLastOccurrence(output, ',');\n          } else {\n            throwObjectKeyExpected();\n          }\n          break;\n        }\n        parseWhitespaceAndSkipComments();\n        const processedColon = parseCharacter(codeColon);\n        const truncatedText = i >= text.length;\n        if (!processedColon) {\n          if (isStartOfValue(text[i]) || truncatedText) {\n            // repair missing colon\n            output = insertBeforeLastWhitespace(output, ':');\n          } else {\n            throwColonExpected();\n          }\n        }\n        const processedValue = parseValue();\n        if (!processedValue) {\n          if (processedColon || truncatedText) {\n            // repair missing object value\n            output += 'null';\n          } else {\n            throwColonExpected();\n          }\n        }\n      }\n      if (text.charCodeAt(i) === codeClosingBrace) {\n        output += '}';\n        i++;\n      } else {\n        // repair missing end bracket\n        output = insertBeforeLastWhitespace(output, '}');\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Parse an array like '[\"item1\", \"item2\", ...]'\n   */\n  function parseArray() {\n    if (text.charCodeAt(i) === codeOpeningBracket) {\n      output += '[';\n      i++;\n      parseWhitespaceAndSkipComments();\n\n      // repair: skip leading comma like in [,1,2,3]\n      if (skipCharacter(codeComma)) {\n        parseWhitespaceAndSkipComments();\n      }\n      let initial = true;\n      while (i < text.length && text.charCodeAt(i) !== codeClosingBracket) {\n        if (!initial) {\n          const processedComma = parseCharacter(codeComma);\n          if (!processedComma) {\n            // repair missing comma\n            output = insertBeforeLastWhitespace(output, ',');\n          }\n        } else {\n          initial = false;\n        }\n        skipEllipsis();\n        const processedValue = parseValue();\n        if (!processedValue) {\n          // repair trailing comma\n          output = stripLastOccurrence(output, ',');\n          break;\n        }\n      }\n      if (text.charCodeAt(i) === codeClosingBracket) {\n        output += ']';\n        i++;\n      } else {\n        // repair missing closing array bracket\n        output = insertBeforeLastWhitespace(output, ']');\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Parse and repair Newline Delimited JSON (NDJSON):\n   * multiple JSON objects separated by a newline character\n   */\n  function parseNewlineDelimitedJSON() {\n    // repair NDJSON\n    let initial = true;\n    let processedValue = true;\n    while (processedValue) {\n      if (!initial) {\n        // parse optional comma, insert when missing\n        const processedComma = parseCharacter(codeComma);\n        if (!processedComma) {\n          // repair: add missing comma\n          output = insertBeforeLastWhitespace(output, ',');\n        }\n      } else {\n        initial = false;\n      }\n      processedValue = parseValue();\n    }\n    if (!processedValue) {\n      // repair: remove trailing comma\n      output = stripLastOccurrence(output, ',');\n    }\n\n    // repair: wrap the output inside array brackets\n    output = \"[\\n\".concat(output, \"\\n]\");\n  }\n\n  /**\n   * Parse a string enclosed by double quotes \"...\". Can contain escaped quotes\n   * Repair strings enclosed in single quotes or special quotes\n   * Repair an escaped string\n   *\n   * The function can run in two stages:\n   * - First, it assumes the string has a valid end quote\n   * - If it turns out that the string does not have a valid end quote followed\n   *   by a delimiter (which should be the case), the function runs again in a\n   *   more conservative way, stopping the string at the first next delimiter\n   *   and fixing the string by inserting a quote there.\n   */\n  function parseString() {\n    let stopAtDelimiter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let skipEscapeChars = text.charCodeAt(i) === codeBackslash;\n    if (skipEscapeChars) {\n      // repair: remove the first escape character\n      i++;\n      skipEscapeChars = true;\n    }\n    if (isQuote(text.charCodeAt(i))) {\n      // double quotes are correct JSON,\n      // single quotes come from JavaScript for example, we assume it will have a correct single end quote too\n      // otherwise, we will match any double-quote-like start with a double-quote-like end,\n      // or any single-quote-like start with a single-quote-like end\n      const isEndQuote = isDoubleQuote(text.charCodeAt(i)) ? isDoubleQuote : isSingleQuote(text.charCodeAt(i)) ? isSingleQuote : isSingleQuoteLike(text.charCodeAt(i)) ? isSingleQuoteLike : isDoubleQuoteLike;\n      const iBefore = i;\n      const oBefore = output.length;\n      let str = '\"';\n      i++;\n      while (true) {\n        if (i >= text.length) {\n          // end of text, we are missing an end quote\n\n          const iPrev = prevNonWhitespaceIndex(i - 1);\n          if (!stopAtDelimiter && isDelimiter(text.charAt(iPrev))) {\n            // if the text ends with a delimiter, like [\"hello],\n            // so the missing end quote should be inserted before this delimiter\n            // retry parsing the string, stopping at the first next delimiter\n            i = iBefore;\n            output = output.substring(0, oBefore);\n            return parseString(true);\n          }\n\n          // repair missing quote\n          str = insertBeforeLastWhitespace(str, '\"');\n          output += str;\n          return true;\n        } else if (isEndQuote(text.charCodeAt(i))) {\n          // end quote\n          // let us check what is before and after the quote to verify whether this is a legit end quote\n          const iQuote = i;\n          const oQuote = str.length;\n          str += '\"';\n          i++;\n          output += str;\n          parseWhitespaceAndSkipComments();\n          if (stopAtDelimiter || i >= text.length || isDelimiter(text.charAt(i)) || isQuote(text.charCodeAt(i)) || isDigit(text.charCodeAt(i))) {\n            // The quote is followed by the end of the text, a delimiter, or a next value\n            // so the quote is indeed the end of the string\n            parseConcatenatedString();\n            return true;\n          }\n          if (isDelimiter(text.charAt(prevNonWhitespaceIndex(iQuote - 1)))) {\n            // This is not the right end quote: it is preceded by a delimiter,\n            // and NOT followed by a delimiter. So, there is an end quote missing\n            // parse the string again and then stop at the first next delimiter\n            i = iBefore;\n            output = output.substring(0, oBefore);\n            return parseString(true);\n          }\n\n          // revert to right after the quote but before any whitespace, and continue parsing the string\n          output = output.substring(0, oBefore);\n          i = iQuote + 1;\n\n          // repair unescaped quote\n          str = str.substring(0, oQuote) + '\\\\' + str.substring(oQuote);\n        } else if (stopAtDelimiter && isDelimiter(text[i])) {\n          // we're in the mode to stop the string at the first delimiter\n          // because there is an end quote missing\n\n          // repair missing quote\n          str = insertBeforeLastWhitespace(str, '\"');\n          output += str;\n          parseConcatenatedString();\n          return true;\n        } else if (text.charCodeAt(i) === codeBackslash) {\n          // handle escaped content like \\n or \\u2605\n          const char = text.charAt(i + 1);\n          const escapeChar = escapeCharacters[char];\n          if (escapeChar !== undefined) {\n            str += text.slice(i, i + 2);\n            i += 2;\n          } else if (char === 'u') {\n            let j = 2;\n            while (j < 6 && isHex(text.charCodeAt(i + j))) {\n              j++;\n            }\n            if (j === 6) {\n              str += text.slice(i, i + 6);\n              i += 6;\n            } else if (i + j >= text.length) {\n              // repair invalid or truncated unicode char at the end of the text\n              // by removing the unicode char and ending the string here\n              i = text.length;\n            } else {\n              throwInvalidUnicodeCharacter();\n            }\n          } else {\n            // repair invalid escape character: remove it\n            str += char;\n            i += 2;\n          }\n        } else {\n          // handle regular characters\n          const char = text.charAt(i);\n          const code = text.charCodeAt(i);\n          if (code === codeDoubleQuote && text.charCodeAt(i - 1) !== codeBackslash) {\n            // repair unescaped double quote\n            str += '\\\\' + char;\n            i++;\n          } else if (isControlCharacter(code)) {\n            // unescaped control character\n            str += controlCharacters[char];\n            i++;\n          } else {\n            if (!isValidStringCharacter(code)) {\n              throwInvalidCharacter(char);\n            }\n            str += char;\n            i++;\n          }\n        }\n        if (skipEscapeChars) {\n          // repair: skipped escape character (nothing to do)\n          skipEscapeCharacter();\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Repair concatenated strings like \"hello\" + \"world\", change this into \"helloworld\"\n   */\n  function parseConcatenatedString() {\n    let processed = false;\n    parseWhitespaceAndSkipComments();\n    while (text.charCodeAt(i) === codePlus) {\n      processed = true;\n      i++;\n      parseWhitespaceAndSkipComments();\n\n      // repair: remove the end quote of the first string\n      output = stripLastOccurrence(output, '\"', true);\n      const start = output.length;\n      const parsedStr = parseString();\n      if (parsedStr) {\n        // repair: remove the start quote of the second string\n        output = removeAtIndex(output, start, 1);\n      } else {\n        // repair: remove the + because it is not followed by a string\n        output = insertBeforeLastWhitespace(output, '\"');\n      }\n    }\n    return processed;\n  }\n\n  /**\n   * Parse a number like 2.4 or 2.4e6\n   */\n  function parseNumber() {\n    const start = i;\n    if (text.charCodeAt(i) === codeMinus) {\n      i++;\n      if (atEndOfNumber()) {\n        repairNumberEndingWithNumericSymbol(start);\n        return true;\n      }\n      if (!isDigit(text.charCodeAt(i))) {\n        i = start;\n        return false;\n      }\n    }\n\n    // Note that in JSON leading zeros like \"00789\" are not allowed.\n    // We will allow all leading zeros here though and at the end of parseNumber\n    // check against trailing zeros and repair that if needed.\n    // Leading zeros can have meaning, so we should not clear them.\n    while (isDigit(text.charCodeAt(i))) {\n      i++;\n    }\n    if (text.charCodeAt(i) === codeDot) {\n      i++;\n      if (atEndOfNumber()) {\n        repairNumberEndingWithNumericSymbol(start);\n        return true;\n      }\n      if (!isDigit(text.charCodeAt(i))) {\n        i = start;\n        return false;\n      }\n      while (isDigit(text.charCodeAt(i))) {\n        i++;\n      }\n    }\n    if (text.charCodeAt(i) === codeLowercaseE || text.charCodeAt(i) === codeUppercaseE) {\n      i++;\n      if (text.charCodeAt(i) === codeMinus || text.charCodeAt(i) === codePlus) {\n        i++;\n      }\n      if (atEndOfNumber()) {\n        repairNumberEndingWithNumericSymbol(start);\n        return true;\n      }\n      if (!isDigit(text.charCodeAt(i))) {\n        i = start;\n        return false;\n      }\n      while (isDigit(text.charCodeAt(i))) {\n        i++;\n      }\n    }\n\n    // if we're not at the end of the number by this point, allow this to be parsed as another type\n    if (!atEndOfNumber()) {\n      i = start;\n      return false;\n    }\n    if (i > start) {\n      // repair a number with leading zeros like \"00789\"\n      const num = text.slice(start, i);\n      const hasInvalidLeadingZero = /^0\\d/.test(num);\n      output += hasInvalidLeadingZero ? \"\\\"\".concat(num, \"\\\"\") : num;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Parse keywords true, false, null\n   * Repair Python keywords True, False, None\n   */\n  function parseKeywords() {\n    return parseKeyword('true', 'true') || parseKeyword('false', 'false') || parseKeyword('null', 'null') ||\n    // repair Python keywords True, False, None\n    parseKeyword('True', 'true') || parseKeyword('False', 'false') || parseKeyword('None', 'null');\n  }\n  function parseKeyword(name, value) {\n    if (text.slice(i, i + name.length) === name) {\n      output += value;\n      i += name.length;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Repair an unquoted string by adding quotes around it\n   * Repair a MongoDB function call like NumberLong(\"2\")\n   * Repair a JSONP function call like callback({...});\n   */\n  function parseUnquotedString() {\n    // note that the symbol can end with whitespaces: we stop at the next delimiter\n    // also, note that we allow strings to contain a slash / in order to support repairing regular expressions\n    const start = i;\n    while (i < text.length && !isDelimiterExceptSlash(text[i]) && !isQuote(text.charCodeAt(i))) {\n      i++;\n    }\n    if (i > start) {\n      if (text.charCodeAt(i) === codeOpenParenthesis && isFunctionName(text.slice(start, i).trim())) {\n        // repair a MongoDB function call like NumberLong(\"2\")\n        // repair a JSONP function call like callback({...});\n        i++;\n        parseValue();\n        if (text.charCodeAt(i) === codeCloseParenthesis) {\n          // repair: skip close bracket of function call\n          i++;\n          if (text.charCodeAt(i) === codeSemicolon) {\n            // repair: skip semicolon after JSONP call\n            i++;\n          }\n        }\n        return true;\n      } else {\n        // repair unquoted string\n        // also, repair undefined into null\n\n        // first, go back to prevent getting trailing whitespaces in the string\n        while (isWhitespace(text.charCodeAt(i - 1)) && i > 0) {\n          i--;\n        }\n        const symbol = text.slice(start, i);\n        output += symbol === 'undefined' ? 'null' : JSON.stringify(symbol);\n        if (text.charCodeAt(i) === codeDoubleQuote) {\n          // we had a missing start quote, but now we encountered the end quote, so we can skip that one\n          i++;\n        }\n        return true;\n      }\n    }\n  }\n  function prevNonWhitespaceIndex(start) {\n    let prev = start;\n    while (prev > 0 && isWhitespace(text.charCodeAt(prev))) {\n      prev--;\n    }\n    return prev;\n  }\n  function atEndOfNumber() {\n    return i >= text.length || isDelimiter(text[i]) || isWhitespace(text.charCodeAt(i));\n  }\n  function repairNumberEndingWithNumericSymbol(start) {\n    // repair numbers cut off at the end\n    // this will only be called when we end after a '.', '-', or 'e' and does not\n    // change the number more than it needs to make it valid JSON\n    output += text.slice(start, i) + '0';\n  }\n  function throwInvalidCharacter(char) {\n    throw new JSONRepairError('Invalid character ' + JSON.stringify(char), i);\n  }\n  function throwUnexpectedCharacter() {\n    throw new JSONRepairError('Unexpected character ' + JSON.stringify(text[i]), i);\n  }\n  function throwUnexpectedEnd() {\n    throw new JSONRepairError('Unexpected end of json string', text.length);\n  }\n  function throwObjectKeyExpected() {\n    throw new JSONRepairError('Object key expected', i);\n  }\n  function throwColonExpected() {\n    throw new JSONRepairError('Colon expected', i);\n  }\n  function throwInvalidUnicodeCharacter() {\n    const chars = text.slice(i, i + 6);\n    throw new JSONRepairError(\"Invalid unicode character \\\"\".concat(chars, \"\\\"\"), i);\n  }\n}\nfunction atEndOfBlockComment(text, i) {\n  return text[i] === '*' && text[i + 1] === '/';\n}\n//# sourceMappingURL=jsonrepair.js.map"],"names":[],"mappings":"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"}